start_time  end_time  speaker title description room
2023-11-14 10:30:00 -0700 2023-11-14 11:15:00 -0700 Joël Quenneville  Which Time Is It? Can you add two time values together? Yes. No. Not so fast!\nReset your clocks and join me on a graphical tour of time itself. You'll discover how "time" is more than a single thing, build intuition around what different operations mean, and get a sense of when some operations are nonsensical. You'll leave with a better mental model for thinking about time and avoiding subtle time-related bugs in your own code.  Ballroom A
2023-11-14 10:30:00 -0700 2023-11-14 11:15:00 -0700 Leonardo Sanclemente  Code Firefighting: Saving Your Ruby Apps from Performance Infernos  Join us as we explore the journey of rescuing Ruby applications in peril. Learn how to identify and battle performance bottlenecks, transforming scalability problems into highly responsive and efficient systems. Don't miss this opportunity to equip yourself with the tools to save your apps from performance infernos. Ballroom B
2023-11-14 10:30:00 -0700 2023-11-14 11:15:00 -0700 Puneet Khushwani  Finding a needle in the haystack - Debugging performance issues What should a developer do if suddenly one day they get assigned to debug a Sev1 performance issue?\nFrom our experience, sometimes finding the problem itself is very difficult and thus takes a lot of time. In this talk we will talk about some profilers which one can use to get visibility into what’s happening while executing code. These profilers may not always give us the exact root-cause but will always be able to give us directions to debug further.\nTo also make things more relatable, as a case-study, we would be using a real problem which our team dealt with recently while upgrading the Ruby version of one of the largest monolith Rails application. Ballroom C
2023-11-14 11:30:00 -0700 2023-11-14 12:15:00 -0700 Jemma Issroff Popping Into CRuby  Ever wondered why a line of Ruby code with no side effects has no performance impact? This talk will explain the concept of "popped" instruction sequences, demystifying how CRuby works behind the scenes to avoid running unnecessary code. We'll delve into parsing, compiling, abstract syntax trees, and instruction sequence. You’ll leave this talk with a deeper understanding of Ruby's inner workings and why they matter.  Ballroom A
2023-11-14 11:30:00 -0700 2023-11-14 12:15:00 -0700 Paul Reece  Get your Data prod ready, Fast, with Ruby Polars! Imagine you receive a CSV of data that has over 500,000 rows and 100 columns. Data is randomly missing in some places, some of the column names are wrong, and you have mixed Data types in some of the columns.  Correcting and cleaning that data by hand could take hours. Fear not! There is a better and faster way.  We will look into using Ruby Polars, a gem written in Rust with a Ruby API, to wrangle and clean tabular data to get it prod ready. By learning some basic operations used in Polars you can greatly expedite the import process of CSV files and API Data. Whether your goal is to use the Data in an existing application or use it in a Ruby AI/Machine learning project(since cleaning Data is a vital first step in this process), this talk will get you well on your way! Ballroom C
2023-11-14 14:30:00 -0700 2023-11-14 15:15:00 -0700 Murray Steele Re-interpreting Data  A talk about turning data into other data. Not particularly useful data, but imagine if you could listen to a jpeg, or see what an executable file looked like, or turn a zip file into an orchestral score?\nSome time ago I stumbled across the header description for WAV files and wondered: what if I took a file and calculated the appropriate WAV file header for it, could I hear my data? Turns out, yes, you can. You probably don’t want to, but you can! In this talk we’ll explore how it works for WAV files, BMP files and MIDI files. Along the way we’ll learn a lot about using ruby to manipulate raw bytes and bits of data, but also we’ll hear a README file, view an executable, and listen to the ruby interpreter itself! Ballroom A
2023-11-14 14:30:00 -0700 2023-11-14 15:15:00 -0700 Kevin Newton  The Future of Understanding Ruby Code For decades, the Ruby community has been fractured in the way that it parses and understands Ruby code. After countless tools have been developed and person-hours have been invested, we still don't have a common language for understanding Ruby code. No longer! Starting in Ruby 3.3, we will have a single API for parsing and understanding Ruby code. This talk will cover the history of how we got here, what is getting built today, and what you can expect from this exciting future.  Ballroom C
2023-11-14 15:30:00 -0700 2023-11-14 16:15:00 -0700 Jenny Shen  Demystifying the Ruby package ecosystem A Ruby application is built on a foundation of its gems. But how does a gem get from the package repository to running in your project? RubyGems and Bundler does an excellent job in removing the complexities of gem resolution and installation so developers can focus on building great software. Let’s do a deep dive on how these tools seamlessly manage the dependencies you need to get your project off the ground!\nIn this talk, we’ll be taking a look at the inner workings of the Ruby package ecosystem. This includes:\n- The processes involved in installing gems from a Gemfile \n- Insights into debugging gems within a Rails application\n- Ensuring you're selecting the right gems to avoid security risks  Ballroom A
2023-11-14 15:30:00 -0700 2023-11-14 16:15:00 -0700 Aji Slater  The Unbreakable Code Whose Breaking Won WWII  After the last carrier pigeon but before digital encryption algorithms, there was the Enigma machine. An ingenious piece of pre-atomic age technology encoded German military secrets during World War II, baffling code-breakers with mere physical rotors, and switches, without elliptic curves or private keys.\nDelve into object-oriented programming and bring the Enigma machine back to life with an emulator built in Ruby. Unravel the secrets of this nigh-unbreakable cipher device, witness OO principles unlock its mysteries, discover the power and versatility of the patterns we use as developers and how they mirror the Enigma's inner workings.  Ballroom C
2023-11-15 10:15:00 -0700 2023-11-15 11:00:00 -0700 Meagan Waller Ruby on Rack: The Magic Between Request and Response  Are you ready to embark on an expedition into the core of Ruby web applications? Well, get ready, because it's time to delve into  web development with Rack—the powerhouse that fuels popular Ruby web frameworks like Rails and Sinatra. In this captivating talk, we'll plunge deep into the inner workings of Rack, the unsung hero of web development. We'll uncover its secrets, bask in its versatility, and summon the magic of custom Rack middleware—where session management, authentication, and caching reside. For developers at all levels, this talk offers practical insights and fresh perspectives. Equip yourself with the prowess to wield Rack's middleware magic, making your development journey more efficient and enjoyable.  Ballroom A
2023-11-15 10:15:00 -0700 2023-11-15 11:00:00 -0700 Jeremy Evans  The Second Oldest Bug Historically, calling a method with a very large number of arguments resulted in a core dump. In Ruby 1.9, this was improved to instead raise SystemStackError.  In Ruby 2.2, the issue was fixed for methods defined in Ruby.  However, in Ruby 3.2, this is still an issue for methods defined in C.  This issue was reported as a bug over 12 years ago, and was the second oldest open bug in Ruby's bug tracker.  Come learn about stacks, heaps, argument handling during method dispatch, and how we fixed this bug in Ruby 3.3. Ballroom C
2023-11-15 11:15:00 -0700 2023-11-15 12:00:00 -0700 Garen Torikian  Wrapping Rust in Ruby Ruby is slow. Despite improvements over the years, the language will never be as fast as a compiled language. To compensate for this, whenever Ruby developers need to run performance critical code, it's not uncommon for them to interoperate with a library written in C. Dozens of well known gems, such as Nokogiri and Bcrypt, already do this. But with C comes other problems: how can we ensure that our low-level code is safe from memory leaks and other security vulnerabilities? In this talk, I'll introduce the oxidize-rb project, which is a suite of open source tools which makes it possible to call Rust libraries from within Ruby. I'll also demonstrate how simple it is to incorporate Rust code (including Cargo dependencies) into a Ruby gem. Ballroom A
2023-11-15 11:15:00 -0700 2023-11-15 12:00:00 -0700 Alan Ridlehoover  The Secret Ingredient: How To Understand and Resolve Just About Any Flaky Test  Flaky tests are an inscrutable bane. Hard to understand. Annoying. And, so frustrating! My personal nemesis is Daylight Saving Time. I can’t tell you how many times I’ve tripped over it. Let’s just say I was well into the “shame on me” part of that relationship, until I discovered the secret ingredient that nearly all flaky tests have in common. Turns out they only seem inscrutable. It really is possible to understand and resolve just about any flaky test.  Ballroom C
2023-11-15 13:30:00 -0700 2023-11-15 14:15:00 -0700 Phil Crissman How Programs Learn, and What Happens After They're Built  In 1994, Stewart Brand published a book called "How Buildings Learn, and What Happens After They're Built". As well as a fascinating account of architecture and the history of various buildings and building styles, some ideas from this book were inspirational to the famous "Big Ball of Mud" paper, by Brian Foote and Joseph Yoder.\nCan we learn anything about building software systems from the observations in Brand's book and the Big Ball of Mud paper? Spoiler alert: yes, I think so! Let's talk about them.  Ballroom A
2023-11-15 13:30:00 -0700 2023-11-15 14:15:00 -0700 Tim Riley Livin’ La Vida Hanami Upside, inside out, Hanami 2.0 is out!\nThis release brings new levels of polish and power to a framework that you can use for Ruby apps of all shapes and sizes.\nTogether we’ll take a first look at Hanami, then build our very own app, and discover how Hanami apps can remain a joy to develop even as they grow.\nOnce you’ve had a taste of it you’ll never be the same!  Ballroom C
